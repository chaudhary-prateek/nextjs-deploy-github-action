name: Deploy nextjs-app

on:
  push:
    branches:
      - main
      - dev
      
jobs:
  release:
    uses: ./.github/workflows/release.yml
    secrets: inherit
    with:
      always_run: true # Ensures the test workflow always runs

  # Job 3: Deploy to GCP
  deploy:
    runs-on: ubuntu-latest
    needs: [release]

    if: github.ref == 'refs/heads/main' # ✅ Only run on main branch

    steps:
            # ✅ Fetching Latest Release from git repo using API
      - name: Get latest release via API
        run: |
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          IMAGE_TAG=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
          
          if [ "$IMAGE_TAG" = "null" ] || [ -z "$IMAGE_TAG" ]; then
            echo "❌ No releases found"
            exit 1
          fi
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "✅ Found release tag: $IMAGE_TAG"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.IMAGE_TAG }}  # ✅ Checkout specific tag  
          fetch-depth: 0


      - name: Verify deployment source
        run: |
          echo "✅ Deploying from tag: ${{ env.IMAGE_TAG }}"
          echo "✅ Commit hash: $(git rev-parse HEAD)"
          echo "✅ Tag verification: $(git describe --tags --exact-match)"
          
#      - name: Checkout code
#        uses: actions/checkout@v3

#      - name: Get latest GitHub release tag
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          IMAGE_TAG=$(gh release view --json tagName -q .tagName)
#          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create env file
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}" >> .env
          echo "NEXT_PUBLIC_LOCALSTORAGE_ENCRYPTION_SECRET_KEY=${NEXT_PUBLIC_LOCALSTORAGE_ENCRYPTION_SECRET_KEY}" >> .env
          cat .env
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_LOCALSTORAGE_ENCRYPTION_SECRET_KEY: ${{ secrets.NEXT_PUBLIC_LOCALSTORAGE_ENCRYPTION_SECRET_KEY }}

      - name: Build and Push Docker Image
        env:
          ECR_REPO: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy on EC2
        env:
          ECR_REPO: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export IMAGE_TAG="${{ env.IMAGE_TAG }}"
            export ECR_REPO="${{ secrets.ECR_REPO }}"

            aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin \$ECR_REPO

            cd /var/www/html
            if docker inspect nextjs-app &> /dev/null; then
              docker commit nextjs-app nextjs-app:backup || true
            fi

            docker pull \$ECR_REPO:\$IMAGE_TAG
            docker stop nextjs-app || true
            docker rm nextjs-app || true

            docker run -d --name nextjs-app -p 3000:3000 \$ECR_REPO:\$IMAGE_TAG || {
              docker rm nextjs-app || true
              docker run -d --name nextjs-app -p 3000:3000 nextjs-app:backup || exit 1
            }

            docker image prune -af
          EOF

      - name: Clean up SSH Key
        if: always()
        run: rm -f key.pem
